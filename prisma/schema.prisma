// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Role {
  id        String     @id @default(cuid())
  role_name String     @db.VarChar(100)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deleted   DateTime?
  userRole  userRole[]

  @@index([role_name])
  @@map("role")
}

model Employee {
  id                      String                    @id @default(cuid())
  user                    User[]
  NIP                     String?                   @db.VarChar(200)
  NIK                     String?                   @unique @db.VarChar(200)
  NPWP                    String?                   @db.VarChar(200)
  id_card                 String?                   @unique
  employee_name           String?                   @db.VarChar(200)
  nick_name               String?                   @db.VarChar(50)
  email                   String?                   @unique @db.VarChar(100)
  birth_place             String?                   @db.VarChar(100)
  birth_date              DateTime?
  address                 String?                   @db.Text
  photo                   String?                   @db.Text
  province                String?                   @db.VarChar(100)
  city                    String?                   @db.VarChar(100)
  districts               String?                   @db.VarChar(100)
  sub_districts           String?                   @db.VarChar(100)
  ec_postalcode           Int?                      @default(0)
  phone_number            String?                   @db.VarChar(50)
  start_join              DateTime?
  remaining_days_of       Int?                      @default(0)
  gender                  Gender?
  marital_status          Maritial?
  position                Position?
  sub_depart              sub_depart?               @relation(fields: [subdepartId], references: [id])
  subdepartId             String?
  employee_status         Employee_Status?
  spouse_name             String?                   @db.VarChar(200)
  gender_spouse           Spouse_Gender?
  spouse_birth_place      String?                   @db.VarChar(100)
  spouse_birth_date       DateTime?
  status_user             Boolean?                  @default(false)
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  deleted                 DateTime?
  Educational_Employee    Educational_Employee[]    @relation("education")
  Certificate_Employee    Certificate_Employee[]    @relation("certificate")
  Employee_Child          Employee_Child[]          @relation("child")
  wor                     wor[]
  cash_advance            cash_advance[]
  stock_outgoing_material stock_outgoing_material[]
  estimator               wor[]                     @relation("estimator")
  operator                operator[]

  @@index([id, nick_name, NIK, id_card, NIP, employee_name])
}

model User {
  id              String            @id @default(cuid())
  username        String            @unique @db.VarChar(50)
  hashed_password String            @db.VarChar(100)
  session         Session?
  employee        Employee?         @relation(fields: [employeeId], references: [id])
  employeeId      String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deleted         DateTime?
  userRole        userRole[]
  Mr              Mr[]
  Sr              Sr[]
  purchase        purchase[]
  approvedRequest approvedRequest[]
  cash_advance    cash_advance[]
  wor             wor[]

  @@index([id, employeeId])
  @@map("user")
}

model userRole {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId    String
  role      Role      @relation(fields: [roleId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  roleId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  @@index([id, userId, roleId])
}

model Session {
  id            String    @id @default(cuid())
  user          User      @relation(fields: [username], references: [username])
  username      String    @unique
  acces_token   String?
  refresh_token String?
  clint_ip      String?   @db.VarChar(100)
  is_bloked     Boolean?  @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deleted       DateTime?

  @@index([username])
  @@map("session")
}

model Customer {
  id         String            @id @default(cuid())
  id_custom  String?           @db.VarChar(100)
  name       String?           @db.VarChar(200)
  email      String?           @unique @db.VarChar(100)
  fax        String?           @db.VarChar(200)
  phone      String?           @db.VarChar(200)
  contact    CustomerContact[] @relation("contact")
  address    CustomerAddress[] @relation("address")
  ppn        Int?              @default(0)
  pph        Int?              @default(0)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  deleted    DateTime?
  Quotations Quotations[]

  @@index([id_custom, name])
  @@map("customer")
}

model CustomerContact {
  id             String       @id @default(cuid())
  contact_person String?      @db.VarChar(100)
  email_person   String?      @db.VarChar(100)
  phone          String?      @db.VarChar(50)
  customer       Customer     @relation("contact", fields: [customerId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  customerId     String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deleted        DateTime?
  Quotations     Quotations[]

  @@index([id, contact_person])
}

model CustomerAddress {
  id                String    @id @default(cuid())
  address_person    String?   @db.Text
  address_workshop  String?   @db.Text
  recipient_address String?   @db.Text
  provinces         String?   @db.VarChar(100)
  cities            String?   @db.VarChar(100)
  districts         String?   @db.VarChar(100)
  sub_districts     String?   @db.VarChar(100)
  ec_postalcode     Int?      @default(0)
  customer          Customer  @relation("address", fields: [customerId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  customerId        String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  deleted           DateTime?

  @@index([id, address_person])
}

model Departement {
  id         String       @id @default(cuid())
  name       String       @db.VarChar(200)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  deleted    DateTime?
  sub_depart sub_depart[]

  @@index([id, name])
}

model sub_depart {
  id             String           @id @default(cuid())
  departement    Departement?     @relation(fields: [deptId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  deptId         String?
  name           String           @db.VarChar(200)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  deleted        DateTime?
  Employee       Employee[]
  dispatchDetail dispatchDetail[]

  @@index([id, name])
}

enum Gender {
  Male
  Female
}

enum Position {
  Manager
  Operator
  Staff
  Supervisor
  Director
}

enum Spouse_Gender {
  Male
  Female
}

enum Child_Gender {
  Male
  Female
}

enum Maritial {
  Single
  Married
  Divorce
}

enum Employee_Status {
  Permanent
  Contract
  OJT
}

model Educational_Employee {
  id          String    @id @default(cuid())
  employee    Employee  @relation("education", fields: [employeeId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  employeeId  String
  school_name String?   @db.VarChar(200)
  last_edu    Last_Edu?
  graduation  String?   @db.VarChar(10)
  ijazah      String?   @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deleted     DateTime?

  @@index([id, school_name])
}

enum Last_Edu {
  Elementary_School  @map("Elementary School")
  Junior_High_School @map("Junior High School")
  Senior_High_School @map("Senior High School")
  Bachelor_Degree    @map("Bachelor Degree")
  Magister
  Postgraduate
}

model Certificate_Employee {
  id               String    @id @default(cuid())
  employee         Employee  @relation("certificate", fields: [employeeId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  employeeId       String
  certificate_name String?   @db.VarChar(200)
  certificate_img  String?   @db.Text
  end_date         DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  deleted          DateTime?

  @@index([id, certificate_name])
}

model Employee_Child {
  id                String        @id @default(cuid())
  name              String?       @db.VarChar(200)
  gender_child      Child_Gender?
  child_birth_place String?       @db.VarChar(100)
  child_birth_date  DateTime?
  employee          Employee      @relation("child", fields: [employeeId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  employeeId        String
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  deleted           DateTime?
}

model Equipment {
  id            String      @id @default(cuid())
  id_equipment  String?     @db.VarChar(200)
  nama          String?     @db.VarChar(200)
  keterangan_eq String?     @db.Text
  eq_image      String?     @db.Text
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  deleted       DateTime?
  eq_part       eq_part[]
  eqandpart     eqandpart[]

  @@index([id, nama, id_equipment])
}

model eq_part {
  id              String           @id @default(cuid())
  equipment       Equipment        @relation(fields: [id_equipment], references: [id], onUpdate: Cascade, onDelete: Cascade)
  id_equipment    String
  id_part         String?          @db.VarChar(200)
  nama_part       String?          @db.VarChar(200)
  keterangan_part Keterangan_Part?
  part_img        String?          @db.Text
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  deleted         DateTime?
  bom_detail      bom_detail[]

  @@index([id, nama_part])
}

model eqandpart {
  id           String    @id @default(cuid())
  equipment    Equipment @relation(fields: [id_equipment], references: [id])
  id_equipment String
  qty          Int       @default(0)
  keterangan   String    @db.Text
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deleted      DateTime?
}

enum Keterangan_Part {
  Rotating   @map("Rotating Part")
  Static     @map("Static Part")
  Consumable @map("Consumable Part")
}

model grup_material {
  id              String            @id @default(cuid())
  kd_group        String?           @db.VarChar(50)
  material_name   String?           @db.VarChar(50)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deleted         DateTime?
  Material_master Material_master[]

  @@index([id, kd_group, material_name])
}

model Material_master {
  id             String           @id @default(cuid())
  kd_material    String?          @db.VarChar(50)
  grup_material  grup_material?   @relation(fields: [kd_group], references: [id], onUpdate: Cascade, onDelete: Cascade)
  kd_group       String?
  material_name  String?          @db.VarChar(200)
  satuan         String?          @db.VarChar(200)
  detail         String?          @db.Text
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  deleted        DateTime?
  bom_detail     bom_detail[]
  Material_Stock Material_Stock[]

  @@index([id, kd_group, material_name, kd_material])
}

model Material_Stock {
  id                      String                    @id @default(cuid())
  Material_master         Material_master?          @relation(fields: [materialId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  materialId              String?
  spesifikasi             String                    @db.Text
  jumlah_Stock            Int                       @default(0)
  harga                   Int                       @default(0)
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  deleted                 DateTime?
  detailMr                detailMr[]
  stock_outgoing_material stock_outgoing_material[]

  @@index([id, materialId, spesifikasi])
}

model Supplier {
  id              String            @id @default(cuid())
  type_supplier   type_sup
  id_sup          String?           @db.VarChar(200)
  supplier_name   String?           @db.VarChar(200)
  addresses_sup   String?           @db.Text
  provinces       String?           @db.VarChar(100)
  cities          String?           @db.VarChar(100)
  districts       String?           @db.VarChar(100)
  sub_districts   String?           @db.VarChar(100)
  ec_postalcode   Int?              @default(0)
  office_email    String?           @unique
  NPWP            String?           @db.VarChar(200)
  ppn             Int?              @default(0)
  pph             Int?              @default(0)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deleted         DateTime?
  SupplierContact SupplierContact[] @relation("suppliercontact")
  SupplierBank    SupplierBank[]    @relation("supplierbank")
  detailMr        detailMr[]
  SrDetail        SrDetail[]
  poandso         poandso[]
  purchase        purchase[]

  @@index([id, id_sup, supplier_name])
}

model SupplierContact {
  id             String    @id @default(cuid())
  contact_person String?   @db.VarChar(100)
  email_person   String?   @unique @db.VarChar(100)
  phone          String?   @db.VarChar(50)
  supplier       Supplier  @relation("suppliercontact", fields: [supplierId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  supplierId     String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deleted        DateTime?

  @@index([id, contact_person])
}

model SupplierBank {
  id           String      @id @default(cuid())
  account_name String?     @db.VarChar(100)
  bank_name    String?     @db.VarChar(100)
  rekening     String?     @db.VarChar(100)
  supplier     Supplier    @relation("supplierbank", fields: [supplierId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  supplierId   String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  deleted      DateTime?
  kontrabon    kontrabon[]

  @@index([id, account_name, bank_name])
}

enum type_sup {
  Material_Supplier @map("Material Supplier")
  Service_Vendor    @map("Service Vendor")
}

model Quotations {
  id                 String            @id @default(cuid())
  quo_num            String?           @db.VarChar(200)
  quo_auto           String?           @db.VarChar(200)
  revision           String?           @default("0")
  revision_desc      String?           @db.Text
  customerId         String
  date               DateTime
  subject            String?           @db.Text
  send_by            String?           @db.Text
  attention          String?           @db.Text
  estimated_delivery String?           @db.Text
  quo_img            String?           @db.Text
  warranty           String?           @db.Text
  note_payment       String?           @db.Text
  term_payment       String?           @db.Text
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  deleted            DateTime?
  Quotations_Detail  String            @db.Text
  wor                wor[]
  CustomerPo         CustomerPo?
  Customer           Customer          @relation(fields: [customerId], references: [id])
  CustomerContact    CustomerContact?  @relation(fields: [customerContactId], references: [id])
  customerContactId  String
  term_of_pay        term_of_pay[]
  price_quotation    price_quotation[]

  @@index([id, quo_num])
}

model price_quotation {
  id          String      @id @default(cuid())
  quotations  Quotations? @relation(fields: [quo_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  quo_id      String?
  qty         Int         @default(0)
  description String?     @db.Text
  unit        String?     @db.Text
  unit_price  Int         @default(0)
  total_price Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deleted     DateTime?
}

model CustomerPo {
  id                String              @id @default(cuid())
  id_po             String?             @db.VarChar(100)
  po_num_auto       String?             @db.VarChar(200)
  quotations        Quotations          @relation(fields: [quo_id], references: [id])
  quo_id            String              @unique
  tax               Tax?
  noted             String?             @db.Text
  upload_doc        String?             @db.Text
  vat               Int                 @default(0)
  grand_tot         Int                 @default(0)
  total             Int                 @default(0)
  date_of_po        DateTime
  date_delivery     DateTime
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  deleted           DateTime?
  Deskription_CusPo Deskription_CusPo[]
  term_of_pay       term_of_pay[]
  wor               wor[]

  @@index([id, id_po])
}

enum Tax {
  ppn
  pph
  ppn_and_pph @map("ppn and pph")
  nontax      @map("non tax")
}

model Deskription_CusPo {
  id          String      @id @default(cuid())
  customerPo  CustomerPo? @relation(fields: [cuspoId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  cuspoId     String?
  qty         Int         @default(0)
  unit        String?     @db.VarChar(50)
  price       Int         @default(0)
  discount    Int         @default(0)
  total       Int         @default(0)
  description String?     @db.Text
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deleted     DateTime?

  @@index([id, cuspoId])
}

model term_of_pay {
  id         String      @id @default(cuid())
  customerPo CustomerPo? @relation(fields: [cuspoId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  cuspoId    String?
  quotations Quotations? @relation(fields: [quo_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  quo_id     String?
  limitpay   Limit_Pay?
  percent    Int         @default(0)
  price      Int         @default(0)
  date_limit DateTime
  note       String?     @db.Text
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  deleted    DateTime?

  @@index([id, cuspoId])
}

enum Limit_Pay {
  Normal
  Down_Payment
  Termin_I
  Termin_II
  Termin_III
  Termin_IV
  Termin_V
  Repayment
}

enum job_operational {
  S
  B
}

enum job_priority {
  Warning
  Top_priority    @map("Top priority")
  Medium_priority @map("Medium priority")
  Low_priority    @map("Low priority")
}

model wor {
  id               String            @id @default(cuid())
  job_no           String?           @db.VarChar(200)
  date_wor         DateTime?
  customerPo       CustomerPo?       @relation(fields: [cuspoId], references: [id])
  cuspoId          String?
  employee         Employee?         @relation(fields: [employeeId], references: [id])
  employeeId       String?
  estimator        Employee?         @relation(fields: [estimatorId], references: [id], name: "estimator")
  estimatorId      String?
  priority_status  Priority_Status?
  date_of_order    DateTime?
  delivery_date    DateTime?
  shipping_address String?           @db.Text
  job_description  String?           @db.Text
  no               String?           @db.Text
  job_operational  job_operational?
  qty              Int               @default(0)
  eq_model         String?           @db.VarChar(100)
  eq_mfg           String?           @db.VarChar(100)
  eq_rotation      String?           @db.VarChar(200)
  eq_power         String?           @db.VarChar(200)
  file_list        String?           @db.Text
  noted            String?           @db.Text
  status           String?           @db.VarChar(20)
  revision         String?           @default("0")
  revision_desc    String?           @db.Text
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  deleted          DateTime?
  Quotations       Quotations?       @relation(fields: [quotationsId], references: [id])
  quotationsId     String?
  timeschedule     timeschedule?
  Mr               Mr?
  Sr               Sr?
  cash_advance     cash_advance[]
  user             User?             @relation(fields: [userId], references: [id])
  userId           String?
  work_scope_item  work_scope_item[]

  @@index([id, job_no, userId])
}

enum Priority_Status {
  ST
  OT
  TM  @map("T&M")
  XXT
  Q
}

model work_scope_item {
  id        String      @id @default(cuid())
  wor       wor?        @relation(fields: [worId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  worId     String?
  qty       Int         @default(0)
  item      String?     @db.VarChar(200)
  unit      String?     @db.Text
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  deleted   DateTime?
  aktivitas aktivitas[]
}

model workCenter {
  id        String     @id @default(cuid())
  name      String?    @db.VarChar(20)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deleted   DateTime?
  SrDetail  SrDetail[]

  @@index([id, name])
}

model masterAktivitas {
  id        String    @id @default(cuid())
  name      String    @db.VarChar(200)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  @@index([id, name])
}

model timeschedule {
  id             String           @id @default(cuid())
  idTs           String?          @db.VarChar(100)
  timesch        DateTime
  wor            wor?             @relation(fields: [worId], references: [id])
  worId          String?          @unique
  job_priority   job_priority?
  status_spv     String?          @db.VarChar(20)
  status_manager String?          @db.VarChar(20)
  holiday        Boolean?         @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  deleted        DateTime?
  aktivitas      aktivitas[]
  drawing        drawing?
  srimg          srimg?
  dispatchDetail dispatchDetail[]

  @@index([id, idTs, worId])
}

model srimg {
  id              String        @id @default(cuid())
  id_summary      String?       @db.VarChar(200)
  date_of_summary DateTime?
  timeschedule    timeschedule? @relation(fields: [timeschId], references: [id])
  timeschId       String?       @unique
  equipment       String?       @db.VarChar(200)
  qty             Int           @default(0)
  model           String?       @db.VarChar(200)
  ioem            String?       @db.VarChar(100)
  isr             String?       @db.VarChar(100)
  itn             String?       @db.VarChar(100)
  introduction    String?       @db.Text
  inimg           String?       @db.VarChar(100)
  status_spv      String?       @db.VarChar(20)
  status_manager  String?       @db.VarChar(20)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  deleted         DateTime?
  srimgdetail     srimgdetail[]
  bom             bom?

  @@index([id, timeschId])
}

model srimgdetail {
  id            String       @id @default(cuid())
  name_part     String?      @db.VarChar(100)
  srimg         srimg?       @relation(fields: [srId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  srId          String?
  qty           Int          @default(0)
  input_finding String?      @db.Text
  choice        choice?
  noted         String?      @db.Text
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  deleted       DateTime?
  imgSummary    imgSummary[]

  @@index([id, name_part])
}

enum choice {
  Manufacture_New @map("Manufacture New")
  Supply_New      @map("Supply New")
  Repair
}

model imgSummary {
  id            String       @id @default(cuid())
  srimgdetail   srimgdetail? @relation(fields: [srimgdetailId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  srimgdetailId String?
  img           String?      @db.Text
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  deleted       DateTime?

  @@index([id, img])
}

model aktivitas {
  id              String           @id @default(cuid())
  timeschedule    timeschedule     @relation(fields: [timeId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  timeId          String
  work_scope_item work_scope_item  @relation(fields: [workId], references: [id])
  workId          String
  bobot           Int              @default(0)
  days            Int              @default(0)
  startday        DateTime
  endday          DateTime
  actual_start    DateTime?
  actual_finish   DateTime?
  so              Boolean?         @default(false)
  progress        Int              @default(0)
  holiday_count   Int              @default(0)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  deleted         DateTime?
  dispatchDetail  dispatchDetail[]

  @@index([id, timeId, workId])
}

model holidayTms {
  id           String    @id @default(cuid())
  date_holiday DateTime
  description  String    @db.Text
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deleted      DateTime?
}

model dispacth {
  id             String    @id @default(cuid())
  id_dispatch    String?   @db.VarChar(20)
  dispacth_date  DateTime
  remark         String?   @db.Text
  status_spv     String?   @db.VarChar(20)
  status_manager String?   @db.VarChar(20)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deleted        DateTime?
  Sr             Sr?

  @@index([id, id_dispatch])
}

model dispatchDetail {
  id            String        @id @default(cuid())
  timeschedule  timeschedule? @relation(fields: [timeschId], references: [id])
  timeschId     String?
  sub_depart    sub_depart    @relation(fields: [subdepId], references: [id])
  subdepId      String
  date_dispatch DateTime
  remark        String?       @db.Text
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  deleted       DateTime?
  SrDetail      SrDetail[]
  aktivitas     aktivitas?    @relation(fields: [aktivitasId], references: [id])
  aktivitasId   String?
  operator      operator[]

  @@index([id])
}

model operator {
  id               String          @id @default(cuid())
  dispatchDetail   dispatchDetail? @relation(fields: [dispatchDetailId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  dispatchDetailId String?
  Employee         Employee?       @relation(fields: [employeeId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  employeeId       String?
  start            DateTime?
  finish           DateTime?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  deleted          DateTime?
}

model drawing {
  id             String         @id @default(cuid())
  id_drawing     String?        @db.VarChar(100)
  timeschedule   timeschedule?  @relation(fields: [timeschId], references: [id])
  timeschId      String?        @unique
  date_drawing   DateTime
  status_spv     String?        @db.VarChar(20)
  status_manager String?        @db.VarChar(20)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  deleted        DateTime?
  file_drawing   file_drawing[]

  @@index([id, timeschId, id_drawing])
}

model file_drawing {
  id          String    @id @default(cuid())
  drawing     drawing   @relation(fields: [drawingId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  drawingId   String
  file_upload String    @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deleted     DateTime?

  @@index([id, drawingId, file_upload])
}

model bom {
  id             String       @id @default(cuid())
  srimg          srimg?       @relation(fields: [srId], references: [id])
  srId           String?      @unique
  status_spv     String?      @db.VarChar(20)
  status_manager String?      @db.VarChar(20)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deleted        DateTime?
  bom_detail     bom_detail[]
  Mr             Mr?

  @@index([id, srId])
}

model bom_detail {
  id              String          @id @default(cuid())
  bom             bom             @relation(fields: [bomId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  bomId           String
  eq_part         eq_part         @relation(fields: [partId], references: [id])
  partId          String
  Material_master Material_master @relation(fields: [materialId], references: [id])
  materialId      String
  dimensi         String          @db.VarChar(200)
  qty             Int             @default(0)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  deleted         DateTime?
  detailMr        detailMr[]

  @@index([id, bomId, partId, materialId])
}

enum MrAppr {
  DP
  Stock
  PO
}

enum SrAppr {
  DSO
  SO
}

enum Currency {
  IDR
  AUD
  EUR
  USD
  YEN
  SGD
}

enum TaxPr {
  ppn
  noneppn @map("none ppn")
  nontax  @map("non tax")
}

enum TaxPsrDmr {
  ppn
  pph
  ppn_and_pph
  non_tax
}

model coa {
  id                      String                    @id @default(cuid())
  coa_code                String                    @db.VarChar(20)
  coa_name                String                    @db.VarChar(200)
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  deleted                 DateTime?
  journal_cashier         journal_cashier[]
  stock_outgoing_material stock_outgoing_material[]

  @@index([id, coa_code, coa_name])
}

enum statusMr {
  Request
  Approval
  Purchase
  Finish
  Reject
  Receive
}

enum statusSr {
  Request
  Approval
  Purchase
  Finish
  Reject
  Receive
}

model Mr {
  id             String     @id @default(cuid())
  statusMr       statusMr?
  wor            wor?       @relation(fields: [worId], references: [id])
  worId          String?    @unique
  no_mr          String?    @db.VarChar(50)
  job_no         String?    @db.VarChar(200)
  bom            bom?       @relation(fields: [bomIdU], references: [id])
  bomIdU         String?    @unique
  date_mr        DateTime
  user           User?      @relation(fields: [userId], references: [id])
  userId         String
  status_spv     String?    @db.VarChar(20)
  status_manager String?    @db.VarChar(20)
  idMrAppr       String?    @db.VarChar(20)
  dateOfAppr     DateTime?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  deleted        DateTime?
  detailMr       detailMr[]

  @@index([id, no_mr, userId, idMrAppr])
}

model detailMr {
  id                String           @id @default(cuid())
  mr                Mr               @relation(fields: [mrId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  mrId              String
  bom_detail        bom_detail?      @relation(fields: [bomIdD], references: [id])
  bomIdD            String?
  spesifikasi       String?          @db.Text
  Material_Stock    Material_Stock?  @relation(fields: [materialStockId], references: [id])
  materialStockId   String?
  note              String?          @db.Text
  qty               Int              @default(0)
  mrappr            MrAppr?
  supplier          Supplier?        @relation(fields: [supId], references: [id])
  supId             String?
  qtyAppr           Int              @default(0)
  disc              Int              @default(0)
  price             Int              @default(0)
  total             Int              @default(0)
  qty_receive       Int?             @default(0)
  status_stock      status_stock?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  deleted           DateTime?
  note_revision     String?          @db.Text
  purchase          purchase?        @relation(fields: [idPurchaseR], references: [id])
  idPurchaseR       String?
  approvedRequest   approvedRequest? @relation(fields: [approvedRequestId], references: [id])
  approvedRequestId String?
  poandso           poandso?         @relation(fields: [poandsoId], references: [id])
  poandsoId         String?

  @@index([id, mrId, bomIdD, spesifikasi, idPurchaseR])
}

model purchase {
  id                      String                   @id @default(cuid())
  idPurchase              String?                  @db.VarChar(20)
  id_receive              String?                  @db.VarChar(20)
  supplier                Supplier?                @relation(fields: [supId], references: [id])
  supId                   String?
  dateOfPurchase          DateTime
  cashAdv                 String?                  @db.VarChar(200)
  totalAdv                Int                      @default(0)
  status_spv_pr           Boolean?                 @default(false)
  status_manager_pr       Boolean?                 @default(false)
  status_manager_director status_manager_director?
  currency                Currency?
  user                    User?                    @relation(fields: [approveById], references: [id])
  approveById             String?
  note                    String?                  @db.Text
  taxPsrDmr               TaxPsrDmr?
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  deleted                 DateTime?
  detailMr                detailMr[]
  SrDetail                SrDetail[]
  kontrabon               kontrabon?
  journal_cashier         journal_cashier[]

  @@index([id, idPurchase, dateOfPurchase, id_receive])
}

enum status_manager_director {
  revision
  reject
  approve
}

model approvedRequest {
  id                String     @id @default(cuid())
  idApprove         String     @db.VarChar(200)
  dateApprove       DateTime
  status_spv_pr     Boolean?   @default(false)
  status_manager_pr Boolean?   @default(false)
  user              User?      @relation(fields: [approveById], references: [id])
  approveById       String?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  deleted           DateTime?
  detailMr          detailMr[]
  SrDetail          SrDetail[]
}

model Sr {
  id             String     @id @default(cuid())
  statusSr       statusSr?
  wor            wor?       @relation(fields: [worId], references: [id])
  worId          String?    @unique
  no_sr          String?    @db.VarChar(50)
  job_no         String?    @db.VarChar(200)
  date_sr        DateTime
  dispacth       dispacth?  @relation(fields: [dispacthIDS], references: [id])
  dispacthIDS    String?    @unique
  status_spv     String?    @db.VarChar(20)
  status_manager String?    @db.VarChar(20)
  idSrAppr       String?    @db.VarChar(20)
  dateOfAppr     DateTime?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  deleted        DateTime?
  SrDetail       SrDetail[]
  user           User?      @relation(fields: [userId], references: [id])
  userId         String?

  @@index([id, no_sr, dispacthIDS, idSrAppr])
}

model SrDetail {
  id                String           @id @default(cuid())
  sr                Sr               @relation(fields: [srId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  srId              String
  dispatchDetail    dispatchDetail?  @relation(fields: [dispacthdetailId], references: [id])
  dispacthdetailId  String?
  part              String?          @db.VarChar(200)
  qty               Int              @default(0)
  unit              String?          @db.VarChar(20)
  workCenter        workCenter?      @relation(fields: [description], references: [id])
  description       String?
  note              String?          @db.Text
  srappr            SrAppr?
  supplier          Supplier?        @relation(fields: [supId], references: [id])
  supId             String?
  disc              Int              @default(0)
  price             Int              @default(0)
  total             Int              @default(0)
  qty_receive       Int?             @default(0)
  purchase          purchase?        @relation(fields: [idPurchaseR], references: [id])
  idPurchaseR       String?
  approvedRequest   approvedRequest? @relation(fields: [approvedRequestId], references: [id])
  approvedRequestId String?
  qtyAppr           Int              @default(0)
  note_revision     String?          @db.Text
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  deleted           DateTime?
  poandso           poandso?         @relation(fields: [poandsoId], references: [id])
  poandsoId         String?

  @@index([id, srId, dispacthdetailId, idPurchaseR])
}

enum status_stock {
  non
  stock
}

model poandso {
  id                      String                    @id @default(cuid())
  id_so                   String?                   @db.VarChar(20)
  id_receive              String?                   @db.VarChar(20)
  currency                Currency?
  taxPsrDmr               TaxPsrDmr?
  date_receive            DateTime?
  supplier                Supplier                  @relation(fields: [supplierId], references: [id])
  supplierId              String
  date_prepared           DateTime
  your_reff               String?                   @db.Text
  note                    String?                   @db.Text
  status_manager          Boolean?                  @default(false)
  status_manager_director status_manager_director?
  status_receive          Boolean?                  @default(false)
  DP                      Int                       @default(0)
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  deleted                 DateTime?
  SrDetail                SrDetail[]
  detailMr                detailMr[]
  term_of_pay_po_so       term_of_pay_po_so[]
  stock_outgoing_material stock_outgoing_material[]
  journal_cashier         journal_cashier[]

  @@index([id, id_so, id_receive])
}

model term_of_pay_po_so {
  id            String      @id @default(cuid())
  poandso       poandso?    @relation(fields: [poandsoId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  poandsoId     String?
  limitpay      Limit_Pay?
  percent       Int         @default(0)
  price         Int         @default(0)
  invoice       String?     @db.Text
  tax_invoice   Boolean?    @default(false)
  status_kontra Boolean     @default(false)
  tax_paid      Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  deleted       DateTime?
  kontrabon     kontrabon[]

  @@index([id, poandsoId])
}

model kontrabon {
  id                String             @id @default(cuid())
  cash_advance      cash_advance?      @relation(fields: [cdvId], references: [id])
  cdvId             String?
  term_of_pay_po_so term_of_pay_po_so? @relation(fields: [termId], references: [id])
  termId            String?
  SupplierBank      SupplierBank?      @relation(fields: [account_name], references: [id])
  account_name      String?
  purchase          purchase?          @relation(fields: [purchaseID], references: [id])
  purchaseID        String?            @unique
  id_kontrabon      String             @db.VarChar(200)
  date_prepered     DateTime
  tax_prepered      DateTime?
  due_date          DateTime
  invoice           String?            @db.Text
  DO                String?            @db.VarChar(200)
  grandtotal        Int                @default(0)
  status_valid      Boolean            @default(false)
  status_duedate    Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  deleted           DateTime?
  cashier           cashier[]

  @@index([id, termId, id_kontrabon, due_date, createdAt])
}

enum status_payment {
  Cash
  Transfer
}

enum status_transaction {
  Debet
  Kredit
}

model cashier {
  id              String            @id @default(cuid())
  id_cashier      String?
  status_payment  status_payment?
  cash_advance    cash_advance?     @relation(fields: [cdvId], references: [id])
  cdvId           String?
  kontrabon       kontrabon?        @relation(fields: [kontrabonId], references: [id])
  kontrabonId     String?
  pay_to          String?           @db.VarChar(200)
  date_cashier    DateTime?
  note            String?           @db.Text
  status_valid    Boolean?          @default(false)
  account_name    String?           @db.VarChar(100)
  bank_name       String?           @db.VarChar(100)
  rekening        String?           @db.VarChar(100)
  total           Int               @default(0)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deleted         DateTime?
  journal_cashier journal_cashier[]

  @@index([id, id_cashier, kontrabonId])
}

model journal_cashier {
  id                 String             @id @default(cuid())
  cashier            cashier?           @relation(fields: [cashier_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  cashier_id         String?
  coa                coa                @relation(fields: [coa_id], references: [id])
  coa_id             String
  poandso            poandso?           @relation(fields: [poandsoId], references: [id])
  poandsoId          String?
  purchase           purchase?          @relation(fields: [purchaseID], references: [id])
  purchaseID         String?
  status_transaction status_transaction
  grandtotal         Int                @default(0)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  deleted            DateTime?

  @@index([id, cashier_id, coa_id])
}

enum type_cdv {
  Consumable
  Investasi
  Service
  Operasional
  SDM
}

model cash_advance {
  id                      String                   @id @default(cuid())
  id_cash_advance         String
  job_no                  String?                  @db.VarChar(200)
  id_spj                  String?
  employee                Employee?                @relation(fields: [employeeId], references: [id])
  employeeId              String?
  wor                     wor?                     @relation(fields: [worId], references: [id])
  worId                   String?
  user                    User?                    @relation(fields: [userId], references: [id])
  userId                  String?
  status_payment          status_payment
  note                    String?                  @db.Text
  status_valid_manager    Boolean                  @default(false)
  status_valid_spv        Boolean                  @default(false)
  status_manager_director status_manager_director?
  date_cash_advance       DateTime
  grand_tot               Int                      @default(0)
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  deleted                 DateTime?
  cashier                 cashier[]
  cdv_detail              cdv_detail[]
  kontrabon               kontrabon[]

  @@index([id, employeeId, worId, userId, id_cash_advance])
}

model cdv_detail {
  id           String       @id @default(cuid())
  cash_advance cash_advance @relation(fields: [cdvId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  cdvId        String
  type_cdv     type_cdv?
  total        Int          @default(0)
  description  String?      @db.Text
  actual       Int          @default(0)
  balance      Int          @default(0)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  deleted      DateTime?

  @@index([id, cdvId, type_cdv])
}

model outgoing_material {
  id                      String                    @id @default(cuid())
  date_outgoing_material  DateTime
  id_outgoing_material    String
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  deleted                 DateTime?
  stock_outgoing_material stock_outgoing_material[]

  @@index([id, id_outgoing_material])
}

model stock_outgoing_material {
  id                String            @id @default(cuid())
  outgoing_material outgoing_material @relation(fields: [outgoingId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  outgoingId        String
  Material_Stock    Material_Stock?   @relation(fields: [materialStockId], references: [id])
  materialStockId   String?
  coa               coa?              @relation(fields: [coa_id], references: [id])
  coa_id            String?
  employee          Employee?         @relation(fields: [employeeId], references: [id])
  employeeId        String?
  poandso           poandso?          @relation(fields: [poandsoId], references: [id])
  poandsoId         String?
  qty_out           Int?              @default(0)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  deleted           DateTime?

  @@index([id, materialStockId, employeeId, outgoingId])
}
