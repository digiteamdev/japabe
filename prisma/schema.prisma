// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Role {
  id        String     @id @default(cuid())
  role_name String     @db.VarChar(100)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deleted   DateTime?
  userRole  userRole[]

  @@index([role_name])
  @@map("role")
}

model Employee {
  id                   String                 @id @default(cuid())
  user                 User[]
  NIP                  String?                @db.VarChar(200)
  NIK                  String?                @db.VarChar(200)
  NPWP                 String?                @db.VarChar(200)
  id_card              String?                @unique
  employee_name        String?                @db.VarChar(200)
  nick_name            String?                @unique @db.VarChar(50)
  email                String?                @unique @db.VarChar(100)
  birth_place          String?                @db.VarChar(100)
  birth_date           DateTime?
  address              String?                @db.Text
  province             String?                @db.VarChar(100)
  city                 String?                @db.VarChar(100)
  districts            String?                @db.VarChar(100)
  sub_districts        String?                @db.VarChar(100)
  ec_postalcode        Int?                   @default(0)
  phone_number         String?                @db.VarChar(50)
  start_join           DateTime?
  remaining_days_of    Int?                   @default(0)
  gender               Gender?
  marital_status       Maritial?
  position             Position?
  sub_depart           sub_depart             @relation(fields: [subdepartId], references: [id])
  subdepartId          String
  employee_status      Employee_Status?
  spouse_name          String?                @db.VarChar(200)
  gender_spouse        Spouse_Gender?
  spouse_birth_place   String?                @db.VarChar(100)
  spouse_birth_date    DateTime?
  status_user          Boolean?               @default(false)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  deleted              DateTime?
  Educational_Employee Educational_Employee[] @relation("education")
  Certificate_Employee Certificate_Employee[] @relation("certificate")
  Employee_Child       Employee_Child[]       @relation("child")
  wor                  wor[]
  dispatchDetail       dispatchDetail[]
  approve              dispatchDetail[]       @relation(name: "approves")

  @@index([id, nick_name, NIK, id_card, NIP, employee_name])
}

model User {
  id              String     @id @default(cuid())
  username        String     @unique @db.VarChar(50)
  hashed_password String     @db.VarChar(100)
  session         Session?
  employee        Employee?  @relation(fields: [employeeId], references: [id])
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  deleted         DateTime?
  employeeId      String?
  userRole        userRole[]
  Mr              Mr[]
  Sr              Sr[]
  approvebyMr     Mr[]       @relation(name: "approveMr")
  approvebySr     Sr[]       @relation(name: "approveSr")

  @@index([id, employeeId])
  @@map("user")
}

model userRole {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId    String
  role      Role      @relation(fields: [roleId], references: [id])
  roleId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  @@index([id, userId, roleId])
}

model Session {
  id            String    @id @default(cuid())
  user          User      @relation(fields: [username], references: [username], onUpdate: Cascade, onDelete: Cascade)
  username      String    @unique
  acces_token   String?
  refresh_token String?
  clint_ip      String?   @db.VarChar(100)
  is_bloked     Boolean?  @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deleted       DateTime?

  @@index([username])
  @@map("session")
}

model Customer {
  id         String            @id @default(cuid())
  id_custom  String?           @db.VarChar(100)
  name       String?           @db.VarChar(200)
  email      String?           @unique @db.VarChar(100)
  contact    CustomerContact[] @relation("contact")
  address    CustomerAddress[] @relation("address")
  ppn        Int?              @default(0)
  pph        Int?              @default(0)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  deleted    DateTime?
  Quotations Quotations[]

  @@index([id_custom, name])
  @@map("customer")
}

model CustomerContact {
  id             String       @id @default(cuid())
  contact_person String?      @db.VarChar(100)
  email_person   String?      @unique @db.VarChar(100)
  phone          String?      @db.VarChar(50)
  customer       Customer     @relation("contact", fields: [customerId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  customerId     String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deleted        DateTime?
  Quotations     Quotations[]

  @@index([id, contact_person])
}

model CustomerAddress {
  id                String    @id @default(cuid())
  address_person    String?   @db.Text
  address_workshop  String?   @db.Text
  recipient_address String?   @db.Text
  provinces         String?   @db.VarChar(100)
  cities            String?   @db.VarChar(100)
  districts         String?   @db.VarChar(100)
  sub_districts     String?   @db.VarChar(100)
  ec_postalcode     Int?      @default(0)
  customer          Customer  @relation("address", fields: [customerId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  customerId        String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  deleted           DateTime?

  @@index([id, address_person])
}

model Departement {
  id         String       @id @default(cuid())
  name       String       @db.VarChar(200)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  deleted    DateTime?
  sub_depart sub_depart[]

  @@index([id, name])
}

model sub_depart {
  id             String           @id @default(cuid())
  departement    Departement?     @relation(fields: [deptId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  deptId         String?
  name           String           @db.VarChar(200)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  deleted        DateTime?
  Employee       Employee[]
  dispatchDetail dispatchDetail[]
}

enum Gender {
  Male
  Female
}

enum Position {
  Manager
  Operator
  Staff
  Supervisor
  Director
}

enum Spouse_Gender {
  Male
  Female
}

enum Child_Gender {
  Male
  Female
}

enum Maritial {
  Single
  Married
  Divorce
}

enum Employee_Status {
  Permanent
  Contract
  OJT
}

model Educational_Employee {
  id          String    @id @default(cuid())
  employee    Employee  @relation("education", fields: [employeeId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  employeeId  String
  school_name String?   @db.VarChar(200)
  last_edu    Last_Edu?
  graduation  String?   @db.VarChar(10)
  ijazah      String?   @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deleted     DateTime?

  @@index([id, school_name])
}

enum Last_Edu {
  Elementary_School  @map("Elementary School")
  Junior_High_School @map("Junior High School")
  Senior_High_School @map("Senior High School")
  Bachelor_Degree    @map("Bachelor Degree")
  Magister
  Postgraduate
}

model Certificate_Employee {
  id               String    @id @default(cuid())
  employee         Employee  @relation("certificate", fields: [employeeId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  employeeId       String
  certificate_name String?   @db.VarChar(200)
  certificate_img  String?   @db.Text
  end_date         DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  deleted          DateTime?

  @@index([id, certificate_name])
}

model Employee_Child {
  id                String        @id @default(cuid())
  name              String?       @db.VarChar(200)
  gender_child      Child_Gender?
  child_birth_place String?       @db.VarChar(100)
  child_birth_date  DateTime?
  employee          Employee      @relation("child", fields: [employeeId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  employeeId        String
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  deleted           DateTime?
}

model Equipment {
  id            String      @id @default(cuid())
  id_equipment  String?     @db.VarChar(200)
  nama          String?     @db.VarChar(200)
  keterangan_eq String?     @db.Text
  eq_image      String?     @db.Text
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  deleted       DateTime?
  eq_part       eq_part[]
  eqandpart     eqandpart[]

  @@index([id, nama, id_equipment])
}

model eq_part {
  id              String           @id @default(cuid())
  equipment       Equipment        @relation(fields: [id_equipment], references: [id], onUpdate: Cascade, onDelete: Cascade)
  id_equipment    String
  id_part         String?          @db.VarChar(200)
  nama_part       String?          @db.VarChar(200)
  keterangan_part Keterangan_Part?
  part_img        String?          @db.Text
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  deleted         DateTime?
  eqandpart       eqandpart[]

  @@index([id, nama_part])
}

model eqandpart {
  id           String     @id @default(cuid())
  equipment    Equipment  @relation(fields: [id_equipment], references: [id])
  id_equipment String
  eq_part      eq_part    @relation(fields: [id_part], references: [id])
  id_part      String
  quotations   Quotations @relation(fields: [id_quotation], references: [id], onUpdate: Cascade, onDelete: Cascade)
  id_quotation String
  qty          Int        @default(0)
  keterangan   String     @db.Text
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deleted      DateTime?
}

enum Keterangan_Part {
  Rotating   @map("Rotating Part")
  Static     @map("Static Part")
  Consumable @map("Consumable Part")
}

model grup_material {
  id              String            @id @default(cuid())
  kd_group        String?           @db.VarChar(50)
  material_name   String?           @db.VarChar(50)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deleted         DateTime?
  Material_master Material_master[]

  @@index([id, kd_group, material_name])
}

model Material_master {
  id             String           @id @default(cuid())
  kd_material    String?          @db.VarChar(50)
  grup_material  grup_material?   @relation(fields: [kd_group], references: [id], onUpdate: Cascade, onDelete: Cascade)
  kd_group       String?
  material_name  String?          @db.VarChar(200)
  satuan         String?          @db.VarChar(200)
  detail         String?          @db.Text
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  deleted        DateTime?
  bom_detail     bom_detail[]
  Material_Stock Material_Stock[]

  @@index([id, kd_group, material_name, kd_material])
}

model Material_Stock {
  id              String           @id @default(cuid())
  Material_master Material_master? @relation(fields: [materialId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  materialId      String?
  spesifikasi     String           @db.Text
  jumlah_Stock    Int              @default(0)
  harga           Int              @default(0)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  deleted         DateTime?
  detailMr        detailMr[]

  @@index([id, materialId, spesifikasi])
}

model Supplier {
  id              String            @id @default(cuid())
  type_supplier   type_sup
  id_sup          String?           @db.VarChar(200)
  supplier_name   String?           @db.VarChar(200)
  addresses_sup   String?           @db.Text
  provinces       String?           @db.VarChar(100)
  cities          String?           @db.VarChar(100)
  districts       String?           @db.VarChar(100)
  sub_districts   String?           @db.VarChar(100)
  ec_postalcode   Int?              @default(0)
  office_email    String?           @unique
  NPWP            String?           @db.VarChar(200)
  ppn             Int?              @default(0)
  pph             Int?              @default(0)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deleted         DateTime?
  SupplierContact SupplierContact[] @relation("suppliercontact")
  SupplierBank    SupplierBank[]    @relation("supplierbank")
  detailMr        detailMr[]
  SrDetail        SrDetail[]

  @@index([id, id_sup, supplier_name])
}

model SupplierContact {
  id             String    @id @default(cuid())
  contact_person String?   @db.VarChar(100)
  email_person   String?   @unique @db.VarChar(100)
  phone          String?   @db.VarChar(50)
  supplier       Supplier  @relation("suppliercontact", fields: [supplierId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  supplierId     String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deleted        DateTime?

  @@index([id, contact_person])
}

model SupplierBank {
  id           String    @id @default(cuid())
  account_name String?   @db.VarChar(100)
  bank_name    String?   @db.VarChar(100)
  rekening     String?   @db.VarChar(100)
  supplier     Supplier  @relation("supplierbank", fields: [supplierId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  supplierId   String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deleted      DateTime?

  @@index([id, account_name, bank_name])
}

enum type_sup {
  Material_Supplier @map("Material Supplier")
  Service_Vendor    @map("Service Vendor")
}

model Quotations {
  id                String              @id @default(cuid())
  quo_num           String?             @db.VarChar(200)
  quo_auto          String?             @db.VarChar(200)
  customerId        String
  date              DateTime
  deskription       String?             @db.Text
  quo_img           String?             @db.Text
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  deleted           DateTime?
  Quotations_Detail Quotations_Detail[]
  wor               wor[]
  CustomerPo        CustomerPo?
  Customer          Customer            @relation(fields: [customerId], references: [id])
  CustomerContact   CustomerContact?    @relation(fields: [customerContactId], references: [id])
  customerContactId String
  eqandpart         eqandpart[]

  @@index([id, quo_num])
}

model Quotations_Detail {
  id           String     @id @default(cuid())
  item_of_work String?    @db.VarChar(200)
  volume       Int        @default(0)
  unit         String?    @db.VarChar(20)
  quotations   Quotations @relation(fields: [quo_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  quo_id       String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deleted      DateTime?

  @@index([id, item_of_work])
}

model CustomerPo {
  id                String              @id @default(cuid())
  id_po             String?             @db.VarChar(100)
  po_num_auto       String?             @db.VarChar(200)
  quotations        Quotations          @relation(fields: [quo_id], references: [id])
  quo_id            String              @unique
  tax               Tax?
  noted             String?             @db.Text
  vat               String
  grand_tot         String
  total             String
  date_of_po        DateTime
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  deleted           DateTime?
  Deskription_CusPo Deskription_CusPo[]
  term_of_pay       term_of_pay[]
  wor               wor[]

  @@index([id, id_po])
}

enum Tax {
  ppn
  pph
  ppn_and_pph @map("ppn and pph")
}

model Deskription_CusPo {
  id          String     @id @default(cuid())
  customerPo  CustomerPo @relation(fields: [cuspoId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  cuspoId     String
  qty         Int        @default(0)
  unit        String?    @db.VarChar(50)
  price       String?
  discount    String?
  total       String?
  description String?    @db.Text
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  deleted     DateTime?

  @@index([id, cuspoId])
}

model term_of_pay {
  id         String     @id @default(cuid())
  customerPo CustomerPo @relation(fields: [cuspoId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  cuspoId    String
  limitpay   Limit_Pay?
  percent    Int        @default(0)
  price      String?
  date_limit DateTime
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  deleted    DateTime?

  @@index([id, cuspoId])
}

enum Limit_Pay {
  Normal
  Down_Payment
  Termin_I
  Termin_II
  Termin_III
  Termin_IV
  Termin_V
  Repayment
}

model wor {
  id                String           @id @default(cuid())
  job_no            String?          @db.VarChar(200)
  job_no_mr         String?          @db.VarChar(200)
  date_wor          DateTime?
  customerPo        CustomerPo       @relation(fields: [cuspoId], references: [id])
  cuspoId           String
  subject           String?          @db.VarChar(200)
  job_desk          String?          @db.Text
  contract_no_spk   String?          @db.VarChar(100)
  employee          Employee         @relation(fields: [employeeId], references: [id])
  employeeId        String
  value_contract    String?
  priority_status   Priority_Status?
  qty               Int              @default(0)
  unit              String?          @db.VarChar(20)
  date_of_order     DateTime?
  delivery_date     DateTime?
  shipping_address  String?          @db.Text
  job_operational   Boolean?         @default(false)
  estimated_man_our Int              @default(0)
  eq_model          String?          @db.VarChar(100)
  eq_mfg            String?          @db.VarChar(100)
  eq_rotation       String?          @db.VarChar(200)
  eq_power          String?          @db.VarChar(200)
  scope_of_work     String?          @db.Text
  file_list         String?          @db.Text
  noted             String?          @db.Text
  status            String?          @db.VarChar(20)
  refivision        String?          @db.VarChar(20)
  refevision_desc   String?          @db.Text
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  deleted           DateTime?
  Quotations        Quotations?      @relation(fields: [quotationsId], references: [id])
  quotationsId      String?
  timeschedule      timeschedule?
  Mr                Mr?
  Sr                Sr?

  @@index([id, job_no])
}

enum Priority_Status {
  ST
  XT
  XXT
  XTASREQ  @map("XT As Req")
  XXTASREQ @map("XXT As Req")
}

model workCenter {
  id             String           @id @default(cuid())
  name           String?          @db.VarChar(20)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  deleted        DateTime?
  dispatchDetail dispatchDetail[]
  SrDetail       SrDetail[]

  @@index([id, name])
}

model masterAktivitas {
  id        String      @id @default(cuid())
  name      String      @db.VarChar(200)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  deleted   DateTime?
  aktivitas aktivitas[]

  @@index([id, name])
}

model timeschedule {
  id             String      @id @default(cuid())
  idTs           String?     @db.VarChar(100)
  timesch        DateTime
  wor            wor?        @relation(fields: [worId], references: [id])
  worId          String?     @unique
  status_spv     String?     @db.VarChar(20)
  status_manager String?     @db.VarChar(20)
  holiday        Boolean?    @default(false)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  deleted        DateTime?
  aktivitas      aktivitas[]
  drawing        drawing?
  srimg          srimg?

  @@index([id, idTs, worId])
}

model srimg {
  id              String        @id @default(cuid())
  id_summary      String?       @db.VarChar(200)
  date_of_summary DateTime?
  timeschedule    timeschedule? @relation(fields: [timeschId], references: [id])
  timeschId       String?       @unique
  ioem            String?       @db.VarChar(100)
  isr             String?       @db.VarChar(100)
  itn             String?       @db.VarChar(100)
  introduction    String?       @db.Text
  inimg           String?       @db.VarChar(100)
  status_spv      String?       @db.VarChar(20)
  status_manager  String?       @db.VarChar(20)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  deleted         DateTime?
  srimgdetail     srimgdetail[]
  bom             bom?
  dispacth        dispacth?

  @@index([id, timeschId])
}

model srimgdetail {
  id            String       @id @default(cuid())
  name_part     String?      @db.VarChar(100)
  srimg         srimg?       @relation(fields: [srId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  srId          String?
  qty           Int          @default(0)
  input_finding String?      @db.Text
  choice        choice?
  noted         String?      @db.Text
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  deleted       DateTime?
  imgSummary    imgSummary[]
  bom_detail    bom_detail[]

  @@index([id, name_part])
}

enum choice {
  Manufacture_New @map("Manufacture New")
  Supply_New      @map("Supply New")
  Repair
}

model imgSummary {
  id            String       @id @default(cuid())
  srimgdetail   srimgdetail? @relation(fields: [srimgdetailId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  srimgdetailId String?
  img           String?      @db.Text
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  deleted       DateTime?

  @@index([id, img])
}

model aktivitas {
  id              String           @id @default(cuid())
  timeschedule    timeschedule     @relation(fields: [timeId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  timeId          String
  masterAktivitas masterAktivitas  @relation(fields: [aktivitasId], references: [id])
  aktivitasId     String
  days            Int              @default(0)
  startday        DateTime
  endday          DateTime
  progress        Int              @default(0)
  holiday_count   Int              @default(0)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  deleted         DateTime?
  dispatchDetail  dispatchDetail[]

  @@index([id, timeId, aktivitasId])
}

model holidayTms {
  id           String    @id @default(cuid())
  date_holiday DateTime
  description  String    @db.Text
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deleted      DateTime?
}

model dispacth {
  id             String           @id @default(cuid())
  srimg          srimg?           @relation(fields: [srId], references: [id])
  srId           String?          @unique
  id_dispatch    String?          @db.VarChar(20)
  dispacth_date  DateTime
  remark         String?          @db.Text
  status_spv     String?          @db.VarChar(20)
  status_manager String?          @db.VarChar(20)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  deleted        DateTime?
  dispatchDetail dispatchDetail[]
  Sr             Sr?

  @@index([id, id_dispatch, srId])
}

model dispatchDetail {
  id          String     @id @default(cuid())
  dispacth    dispacth   @relation(fields: [dispacthID], references: [id], onUpdate: Cascade, onDelete: Cascade)
  dispacthID  String
  workCenter  workCenter @relation(fields: [workId], references: [id])
  workId      String
  sub_depart  sub_depart @relation(fields: [subdepId], references: [id])
  subdepId    String
  aktivitas   aktivitas  @relation(fields: [aktivitasID], references: [id])
  aktivitasID String
  part        String?    @db.VarChar(100)
  start       DateTime?
  finish      DateTime?
  actual      DateTime?
  so          Boolean?   @default(false)
  Employee    Employee?  @relation(fields: [operatorID], references: [id])
  approve     Employee?  @relation(fields: [approvebyID], references: [id], name: "approves")
  operatorID  String?
  approvebyID String?
  remark      String?    @db.Text
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  deleted     DateTime?
  SrDetail    SrDetail[]

  @@index([id, part, dispacthID, aktivitasID, workId])
}

model drawing {
  id             String         @id @default(cuid())
  id_drawing     String?        @db.VarChar(100)
  timeschedule   timeschedule?  @relation(fields: [timeschId], references: [id])
  timeschId      String?        @unique
  date_drawing   DateTime
  status_spv     String?        @db.VarChar(20)
  status_manager String?        @db.VarChar(20)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  deleted        DateTime?
  file_drawing   file_drawing[]

  @@index([id, timeschId, id_drawing])
}

model file_drawing {
  id          String    @id @default(cuid())
  drawing     drawing   @relation(fields: [drawingId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  drawingId   String
  file_upload String    @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deleted     DateTime?

  @@index([id, drawingId, file_upload])
}

model bom {
  id             String       @id @default(cuid())
  srimg          srimg?       @relation(fields: [srId], references: [id])
  srId           String?      @unique
  status_spv     String?      @db.VarChar(20)
  status_manager String?      @db.VarChar(20)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deleted        DateTime?
  bom_detail     bom_detail[]
  Mr             Mr?

  @@index([id, srId])
}

model bom_detail {
  id              String          @id @default(cuid())
  bom             bom             @relation(fields: [bomId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  bomId           String
  srimgdetail     srimgdetail     @relation(fields: [partId], references: [id])
  partId          String
  Material_master Material_master @relation(fields: [materialId], references: [id])
  materialId      String
  dimensi         String          @db.VarChar(200)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  deleted         DateTime?
  detailMr        detailMr[]

  @@index([id, bomId, partId, materialId])
}

enum MrAppr {
  DP
  Stock
  PO
}

enum SrAppr {
  DSO
  SO
}

enum Currency {
  IDR
  AUD
  EUR
  USD
  YEN
  SGD
}

model coa {
  id        String     @id @default(cuid())
  coa_code  String     @db.VarChar(20)
  coa_name  String     @db.VarChar(200)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deleted   DateTime?
  detailMr  detailMr[]
  SrDetail  SrDetail[]

  @@index([id, coa_code, coa_name])
}

model Mr {
  id                 String     @id @default(cuid())
  wor                wor?       @relation(fields: [worId], references: [id])
  worId              String?    @unique
  no_mr              String?    @db.VarChar(50)
  bom                bom?       @relation(fields: [bomIdU], references: [id])
  bomIdU             String?    @unique
  date_mr            DateTime
  user               User       @relation(fields: [userId], references: [id])
  userId             String
  status_spv         String?    @db.VarChar(20)
  status_manager     String?    @db.VarChar(20)
  status_spv_pr      String?    @db.VarChar(20)
  status_manager_pr  String?    @db.VarChar(20)
  status_spv_dmr     String?    @db.VarChar(20)
  status_manager_dmr String?    @db.VarChar(20)
  idMrAppr           String?    @db.VarChar(20)
  dateOfAppr         DateTime?
  approvebyMr        User?      @relation(fields: [approveById], references: [id], name: "approveMr")
  approveById        String?
  idPurchase         String?    @db.VarChar(20)
  dateOfPr           DateTime?
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  deleted            DateTime?
  detailMr           detailMr[]

  @@index([id, no_mr, userId, idMrAppr, idPurchase])
}

model detailMr {
  id              String          @id @default(cuid())
  mr              Mr              @relation(fields: [mrId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  mrId            String
  bom_detail      bom_detail?     @relation(fields: [bomIdD], references: [id])
  bomIdD          String?
  spesifikasi     String?         @db.Text
  Material_Stock  Material_Stock? @relation(fields: [materialStockId], references: [id])
  materialStockId String?
  note            String?         @db.Text
  qty             Int             @default(0)
  mrappr          MrAppr?
  supplier        Supplier?       @relation(fields: [supId], references: [id])
  supId           String?
  qtyAppr         Int             @default(0)
  tax             Tax?
  coa             coa?            @relation(fields: [akunId], references: [id])
  akunId          String?
  disc            Int             @default(0)
  currency        Currency?
  total           Int             @default(0)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  deleted         DateTime?

  @@index([id, mrId, bomIdD, spesifikasi])
}

model Sr {
  id                 String     @id @default(cuid())
  user               User       @relation(fields: [userId], references: [id])
  userId             String
  wor                wor?       @relation(fields: [worId], references: [id])
  worId              String?    @unique
  no_sr              String?    @db.VarChar(50)
  date_sr            DateTime
  dispacth           dispacth?  @relation(fields: [dispacthIDS], references: [id])
  dispacthIDS        String?    @unique
  status_spv         String?    @db.VarChar(20)
  status_manager     String?    @db.VarChar(20)
  status_spv_pr      String?    @db.VarChar(20)
  status_manager_pr  String?    @db.VarChar(20)
  status_spv_dmr     String?    @db.VarChar(20)
  status_manager_dmr String?    @db.VarChar(20)
  idSrAppr           String?    @db.VarChar(20)
  dateOfAppr         DateTime?
  approvebySr        User?      @relation(fields: [approveById], references: [id], name: "approveSr")
  approveById        String?
  idPsr              String?    @db.VarChar(20)
  dateOfPsr          DateTime?
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  deleted            DateTime?
  SrDetail           SrDetail[]

  @@index([id, no_sr, dispacthIDS, idSrAppr, idPsr])
}

model SrDetail {
  id               String          @id @default(cuid())
  sr               Sr              @relation(fields: [srId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  srId             String
  dispatchDetail   dispatchDetail? @relation(fields: [dispacthdetailId], references: [id])
  dispacthdetailId String?
  part             String?         @db.VarChar(200)
  qty              Int             @default(0)
  unit             String?         @db.VarChar(20)
  workCenter       workCenter?     @relation(fields: [description], references: [id])
  description      String?
  note             String?         @db.Text
  srappr           SrAppr?
  supplier         Supplier?       @relation(fields: [supId], references: [id])
  supId            String?
  tax              Tax?
  coa              coa?            @relation(fields: [akunId], references: [id])
  akunId           String?
  disc             Int             @default(0)
  currency         Currency?
  total            Int             @default(0)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  deleted          DateTime?

  @@index([id, srId, dispacthdetailId])
}
